{% extends 'base.exported.class' %}

{% block content %}
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.lang.reflect.Type;
{% if is_test or to_json %}
import java.util.Arrays;
{% endif %}
import java.util.List;
import java.util.Scanner;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;


class {{ class_name }} {

    private final double EPSILON = Math.ulp(1.0);

    private class Tree {
        private int[] lefts;
        private int[] rights;
        private double[] thresholds;
        private int[] indices;
        private double[][] classes;

        private double[] normVals(double[] nums) {
            int i, l = nums.length;
            double[] result = new double[l];
            double sum = 0.;
            for (i = 0; i < l; i++) {
                sum += nums[i];
            }
            if(sum == 0) {
                for (i = 0; i < l; i++) {
                    result[i] = 1.0 / nums.length;
                }
            } else {
                for (i = 0; i < l; i++) {
                    result[i] = nums[i] / sum;
                }
            }
            return result;
        }

        private double[] compute(double[] features, int node) {
            while (this.thresholds[node] != -2) {
                if (features[this.indices[node]] <= this.thresholds[node]) {
                    node = this.lefts[node];
                } else {
                    node = this.rights[node];
                }
            }
            return this.normVals(this.classes[node]);
        }

        private double[] compute(double[] features) {
            return this.compute(features, 0);
        }
    }

    private List<Tree> forest;
    private int nClasses;
    private int nEstimators;

    public {{ class_name }} (String file) throws FileNotFoundException {
        String jsonStr = new Scanner(new File(file)).useDelimiter("\\Z").next();
        Gson gson = new Gson();
        Type listType = new TypeToken<List<Tree>>(){}.getType();
        this.forest = gson.fromJson(jsonStr, listType);
        this.nEstimators = this.forest.size();
        this.nClasses = this.forest.get(0).classes[0].length;
    }

    private int findMax(double[] nums) {
        int idx = 0;
        for (int i = 0; i < nums.length; i++) {
            idx = nums[i] > nums[idx] ? i : idx;
        }
        return idx;
    }

    private double[] compute(double[] features) {
        double[][] probasTree = new double[this.nEstimators][this.nClasses];
        double[] probas = new double[this.nClasses];
        double sum;
        for (int i = 0; i < this.nEstimators; i++) {
            Tree tree = this.forest.get(i);
            probasTree[i] = tree.compute(features);
            for (int j = 0; j < this.nClasses; j++) {
                if (probasTree[i][j] > 0) {
                    probasTree[i][j] = Math.log(probasTree[i][j]);
                } else {
                    probasTree[i][j] = Math.log(this.EPSILON);
                }
            }
            sum = 0;
            for (int j = 0; j < this.nClasses; j++) {
                sum += probasTree[i][j];
            }
            for (int j = 0; j < nClasses; j++) {
                probasTree[i][j] = (nClasses - 1) * (probasTree[i][j] - (1. / nClasses) * sum);
            }
        }
        for (int i = 0; i < this.nEstimators; i++) {
            for (int j = 0; j < this.nClasses; j++) {
                probas[j] += probasTree[i][j];
            }
        }
        if (this.nEstimators > 1) {
            for (int j = 0; j < this.nClasses; j++) {
                probas[j] /= this.nEstimators;
            }
        }
        for (int j = 0; j < this.nClasses; j++) {
            probas[j] = Math.exp((1. / (this.nClasses - 1)) * probas[j]);
        }
        sum = 0;
        for (int j = 0; j < this.nClasses; j++) {
            sum += probas[j];
        }
        if (sum != 0.) {
            for (int j = 0; j < this.nClasses; j++) {
                probas[j] /= sum;
            }
        }
        return probas;
    }

    private int predict(double[] features) {
        return findMax(this.predictProba(features));
    }

    private double[] predictProba(double[] features) {
        return this.compute(features);
    }

    public static void main(String[] args) throws IOException {
        int nFeatures = {{ n_features }};
        if (args.length != (nFeatures + 1) || !args[0].endsWith(".json")) {
            throw new IllegalArgumentException("You have to pass the path to the exported model data and " +  String.valueOf(nFeatures) + " features.");
        }

        // Features:
        double[] features = new double[args.length-1];
        for (int i = 1, l = args.length; i < l; i++) {
            features[i - 1] = Double.parseDouble(args[i]);
        }

        // Model data:
        String modelData = args[0];

        // Estimator:
        {{ class_name }} clf = new {{ class_name }}(modelData);

        {% if is_test or to_json %}
        // Get JSON:
        int prediction = clf.predict(features);
        double[] probabilities = clf.predictProba(features);
        System.out.println("{\"predict\": " + String.valueOf(prediction) + ", \"predict_proba\": " + String.join(",", Arrays.toString(probabilities)) + "}");
        {% else %}
        // Get class prediction:
        int prediction = clf.predict(features);
        System.out.println("Predicted class: #" + String.valueOf(prediction));

        // Get class probabilities:
        double[] probabilities = clf.predictProba(features);
        for (int i = 0; i < probabilities.length; i++) {
            System.out.print(String.valueOf(probabilities[i]));
            if (i != probabilities.length - 1) {
                System.out.print(",");
            }
        }
        {% endif %}

    }
}
{% endblock %}