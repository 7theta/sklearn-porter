var {class_name} = function(hidden, layers, weights, bias) {{

    this.hidden = hidden.toUpperCase();
    this.network = new Array(layers.length + 1);
    for (var i = 0, l = layers.length; i < l; i++) {{
        this.network[i + 1] = new Array(layers[i]).fill(0.);
    }}
    this.weights = weights;
    this.bias = bias;

    var compute = function(activation, v, nLayers) {{
        var i = 0, l = v.length;
        switch (activation) {{
            case 'LOGISTIC':
                if (nLayers > 1) {{
                    for (i = 0; i < l; i++) {{
                        v[i] = 1. / (1. + Math.exp(-v[i]));
                    }}
                }} else {{
                    for (i = 0; i < l; i++) {{
                        if (v[i] > 0) {{
                            v[i] = -Math.log(1. + Math.exp(-v[i]));
                        }} else {{
                            v[i] = v[i] - Math.log(1. + Math.exp(-v[i]));
                        }}
                    }}
                }}
                break;
            case 'RELU':
                for (i = 0; i < l; i++) {{
                    v[i] = Math.max(0, v[i]);
                }}
                break;
            case 'TANH':
                for (i = 0; i < l; i++) {{
                    v[i] = Math.tanh(v[i]);
                }}
                break;
            case 'SOFTMAX':
                var max = Number.NEGATIVE_INFINITY;
                for (i = 0; i < l; i++) {{
                    if (v[i] > max) {{
                        max = v[i];
                    }}
                }}
                for (i = 0; i < l; i++) {{
                    v[i] = Math.exp(v[i] - max);
                }}
                var sum = 0.0;
                for (i = 0; i < l; i++) {{
                    sum += v[i];
                }}
                for (i = 0; i < l; i++) {{
                    v[i] /= sum;
                }}
                break;
        }}
        return v;
    }};

    this.{method_name} = function(neurons) {{
        this.network[0] = neurons;

        for (var i = 0; i < this.network.length - 1; i++) {{
            for (var j = 0; j < this.network[i + 1].length; j++) {{
                this.network[i + 1][j] = this.bias[i][j];
                for (var l = 0; l < this.network[i].length; l++) {{
                    this.network[i + 1][j] += this.network[i][l] * this.weights[i][l][j];
                }}
            }}
            if ((i + 1) < (this.network.length - 1)) {{
                this.network[i + 1] = compute(this.hidden, this.network[i + 1], this.network.length);
            }}
        }}

        if (this.network[this.network.length - 1].length > 1) {{
            return this.network[this.network.length - 1];
        }}
        return this.network[this.network.length - 1][0];
    }};

}};

if (typeof process !== 'undefined' && typeof process.argv !== 'undefined') {{
    if (process.argv.length - 2 === {n_features}) {{

        // Features:
        var features = process.argv.slice(2);

        // Parameters:
        {layers}
        {weights}
        {bias}

        // Prediction:
        var reg = new {class_name}('{hidden_activation}', layers, weights, bias);
        var prediction = reg.{method_name}(features);
        console.log(prediction);

    }}
}}