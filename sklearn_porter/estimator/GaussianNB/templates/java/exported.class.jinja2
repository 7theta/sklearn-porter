{% extends 'base.exported.class' %}

{% block content %}
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import com.google.gson.Gson;
{% if is_test or to_json %}
import java.util.Arrays;
{% endif %}


class {{ class_name }} {

    private class Classifier {
        private double[] priors;
        private double[][] sigmas;
        private double[][] thetas;
    }

    private Classifier clf;

    public {{ class_name }}(String file) throws FileNotFoundException {
        String jsonStr = new Scanner(new File(file)).useDelimiter("\\Z").next();
        this.clf = new Gson().fromJson(jsonStr, Classifier.class);
    }

    private int findMax(double[] nums) {
        int i = 0, l = nums.length, idx = 0;
        for (i = 0; i < l; i++) {
            idx = nums[i] > nums[idx] ? i : idx;
        }
        return idx;
    }

    public int predict(double[] features) {
        double[] likelihoods = new double[this.clf.sigmas.length];
        for (int i = 0, il = this.clf.sigmas.length; i < il; i++) {
            double sum = 0.;
            for (int j = 0, jl = this.clf.sigmas[0].length; j < jl; j++) {
                sum += Math.log(2. * Math.PI * this.clf.sigmas[i][j]);
            }
            double nij = -0.5 * sum;
            sum = 0.;
            for (int j = 0, jl = this.clf.sigmas[0].length; j < jl; j++) {
                sum += Math.pow(features[j] - this.clf.thetas[i][j], 2.) / this.clf.sigmas[i][j];
            }
            nij -= 0.5 * sum;
            likelihoods[i] = Math.log(this.clf.priors[i]) + nij;
        }
        return findMax(likelihoods);
    }

    public static void main(String[] args) throws FileNotFoundException {

        // Features:
        double[] features = new double[args.length-1];
        for (int i = 1, l = args.length; i < l; i++) {
            features[i - 1] = Double.parseDouble(args[i]);
        }

        // Model data:
        String modelData = args[0];

        // Estimator:
        {{ class_name }} clf = new {{ class_name }}(modelData);

        {% if is_test or to_json %}
        // Get JSON:
        int prediction = clf.predict(features);
        System.out.println("{\"predict\": " + String.valueOf(prediction) + "}");
        {% else %}
        // Get class prediction:
        int prediction = clf.predict(features);
        System.out.println("Predicted class: #" + String.valueOf(prediction));
        {% endif %}

    }
}
{% endblock %}