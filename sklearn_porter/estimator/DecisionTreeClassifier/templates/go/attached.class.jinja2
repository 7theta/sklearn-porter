{% extends 'base.attached.class' %}

{% block content %}
package main

import (
	{% if is_test %}
	"encoding/json"
	{% endif %}
	"fmt"
	"os"
	"strconv"
)
{% if is_test %}
type response struct {
	Predict int `json:"predict"`
	PredictProba []float64 `json:"predict_proba"`
}
{% endif %}

type {{ class_name }} struct {
	lefts []int
	rights []int
	thresholds []float64
	indices []int
	classes [][]int
}

func (dtc {{ class_name }}) findMax(nums []int) int {
	var idx = 0
	for i := 0; i < len(nums); i++ {
		if nums[i] > nums[idx] {
			idx = i
		}
	}
	return idx
}

func (dtc {{ class_name }}) normVals(nums []int) []float64 {
	var l = len(nums)
	var sum = 0
	for i := 0; i < l; i++ {
		sum += nums[i]
	}
	result := make([]float64, l)
	if sum == 0 {
		for i := 0; i < l; i++ {
			result[i] = float64(1) / float64(l)
		}
	} else {
		for i := 0; i < l; i++ {
			result[i] = float64(nums[i]) / float64(sum)
		}
	}
	return result
}

func (dtc {{ class_name }}) predict(features []float64, node int) int {
	if dtc.thresholds[node] != -2 {
		if features[dtc.indices[node]] <= dtc.thresholds[node] {
			return dtc.predict(features, dtc.lefts[node])
		} else {
			return dtc.predict(features, dtc.rights[node])
		}
	}
	return dtc.findMax(dtc.classes[node])
}

func (dtc {{ class_name }}) Predict(features []float64) int {
	return dtc.predict(features, 0)
}

func (dtc {{ class_name }}) predictProba(features []float64, node int) []float64 {
	if dtc.thresholds[node] != -2 {
		if features[dtc.indices[node]] <= dtc.thresholds[node] {
			return dtc.predictProba(features, dtc.lefts[node])
		} else {
			return dtc.predictProba(features, dtc.rights[node])
		}
	}
	return dtc.normVals(dtc.classes[node])
}

func (dtc {{ class_name }}) PredictProba(features []float64) []float64 {
	return dtc.predictProba(features, 0)
}

func main() {

	// Features:
	var features []float64
	for _, arg := range os.Args[1:] {
		if n, err := strconv.ParseFloat(arg, 64); err == nil {
			features = append(features, n)
		}
	}

	// Model data:
	{{ lefts }}
	{{ rights }}
	{{ thresholds }}
	{{ indices }}
	{{ classes }}

	// Estimator:
	clf := {{ class_name }}{lefts, rights, thresholds, indices, classes}

	// Get class prediction:
	prediction := clf.Predict(features)
	{% if not is_test %}
	fmt.Printf("Predicted class: #%d\n", prediction)
	{% endif %}

	// Get class probabilities:
	probabilities := clf.PredictProba(features)
  {% if not is_test %}
	for i := 0; i < len(probabilities); i++ {
		fmt.Printf("Probability of class #%d : %.f\n", i, probabilities[i])
	}
  {% endif %}

	{% if is_test %}
	res, _ := json.Marshal(&response{Predict: prediction, PredictProba: probabilities})
	fmt.Println(string(res))
	{% endif %}
}
{% endblock %}