{% extends 'base.attached.class' %}

{% block content %}
var {{ class_name }} = function(lefts, rights, thresholds, indices, classes) {

    this.lefts = lefts;
    this.rights = rights;
    this.thresholds = thresholds;
    this.indices = indices;
    this.classes = classes;

    var findMax = function(nums) {
        var i = 0, l = nums.length, idx = 0;
        for (; i < l; i++) {
            idx = nums[i] > nums[idx] ? i : idx;
        }
        return idx;
    };

    var normVals = function(nums) {
        var i = 0, l = nums.length;
        var result = [];
        var sum = 0.;

        for (i = 0; i < l; i++) {
            sum += nums[i];
        }
        if(sum === 0) {
            for (i = 0; i < l; i++) {
                result[i] = 1.0 / l;
            }
        } else {
            for (i = 0; i < l; i++) {
                result[i] = nums[i] / sum;
            }
        }
        return result;
    };

    this._compute = function(features, node, post) {
        node = (typeof node !== 'undefined') ? node : 0;
        if (this.thresholds[node] !== -2) {
            if (features[this.indices[node]] <= this.thresholds[node]) {
                return this._compute(features, this.lefts[node], post);
            } else {
                return this._compute(features, this.rights[node], post);
            }
        }
        return post(this.classes[node]);
    };

    this.predict = function(features, node) {
        return this._compute(features, node, findMax);
    };

    this.predictProba = function(features, node) {
        return this._compute(features, node, normVals);
    };

};

if (typeof process !== 'undefined' && typeof process.argv !== 'undefined') {
    if (process.argv.length - 2 === {{ n_features }}) {

        // Features:
        var features = process.argv.slice(2);

        // Model data:
        {{ lefts }}
        {{ rights }}
        {{ thresholds }}
        {{ indices }}
        {{ classes }}

        // Estimator:
        var clf = new {{ class_name }}(lefts, rights, thresholds, indices, classes);

        // Get class prediction:
        var prediction = clf.predict(features);
        {% if not is_test %}
        console.log("Predicted class: #" + prediction);
        {% endif %}

        // Get class probabilities:
        var probabilities = clf.predictProba(features);
        {% if not is_test %}
        for (var i = 0; i < probabilities.length; i++) {
            console.log("Probability of class #" + i + " : " + probabilities[i]);
        }
        {% endif %}

        {% if is_test %}
        console.log(JSON.stringify({
            "predict": prediction,
            "predict_proba": probabilities
        }));
        {% endif %}
    }
}
{% endblock %}