{% extends 'base.attached.class' %}

{% block content %}
{% if is_test %}
require 'json'
{% endif %}
class {{ class_name }}

    def initialize (lefts, rights, thresholds, indices, classes)
        @lefts = lefts
        @rights = rights
        @thresholds = thresholds
        @indices = indices
        @classes = classes
    end

    def findMax (nums)
        idx = 0
        for i in 0 ... nums.length
            idx = nums[i] > nums[idx] ? i : idx
        end
        return idx
    end

    def predict (features, node=0)
        if @thresholds[node] != -2
            if features[@indices[node]] <= @thresholds[node]
                return predict features, @lefts[node]
            else
                return predict features, @rights[node]
            end
        end
        return findMax @classes[node]
    end

end

if ARGV.length == {{ n_features }}

    # Features:
    features = ARGV.collect { |i| i.to_f }

    # Model data:
    {{ lefts }}
    {{ rights }}
    {{ thresholds }}
    {{ indices }}
    {{ classes }}

    # Estimator:
    clf = {{ class_name }}.new lefts, rights, thresholds, indices, classes

    # Get class prediction:
    prediction = clf.predict features
    {% if not is_test %}
    puts "Predicted class: ##{prediction}"
    {% endif %}
    {% if is_test %}
    puts JSON.generate({:predict => prediction, :predict_proba => []})
    {% endif %}
end
{% endblock %}