# This file is generated by https://github.com/nok/sklearn-porter/
#
# Estimator:
#     {estimator_name}
#
# Documentation:
#     {estimator_url}
#
# Further usage:
#     1. Execute a prediction:
#         $ ruby {class_name}.rb <feature_1>  ... <feature_{n_features}>

class {class_name}

    def initialize (lefts, rights, thresholds, indices, classes)
        @lefts = lefts
        @rights = rights
        @thresholds = thresholds
        @indices = indices
        @classes = classes
    end

    def findMax (nums)
        index = 0
        for i in 0 ... nums.length
            index = nums[i] > nums[index] ? i : index
        end
        return index
    end

    def {method_name} (features, node=0)
        if @thresholds[node] != -2
            if features[@indices[node]] <= @thresholds[node]
                return {method_name} features, @lefts[node]
            else
                return {method_name} features, @rights[node]
            end
        end
        return findMax @classes[node]
    end

end

if ARGV.length == {n_features}

    # Features:
    features = ARGV.collect {{ |i| i.to_f }}

    # Parameters:
    {lefts}
    {rights}
    {thresholds}
    {indices}
    {classes}

    # Prediction:
    clf = {class_name}.new lefts, rights, thresholds, indices, classes
    estimation = clf.{method_name} features
    puts estimation

end