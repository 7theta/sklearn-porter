/*
This file is generated by https://github.com/nok/sklearn-porter/

Estimator:
    {estimator_name}

Documentation:
    {estimator_url}

Further usage:
    1. Compile the generated source code:
        $ gcc {class_name}.c -std=c99 -lm -o {class_name}
    2. Execute a prediction:
        $ ./{class_name} <feature_1>  ... <feature_{n_features}>
*/

#include <stdlib.h>
#include <stdio.h>
#include <math.h>

#define N_FEATURES {n_features}
#define N_CLASSES {n_classes}

{lefts}
{rights}
{thresholds}
{indices}
{classes}

int findMax(int nums[N_CLASSES]) {{
    int index = 0;
    for (int i = 0; i < N_CLASSES; i++) {{
        index = nums[i] > nums[index] ? i : index;
    }}
    return index;
}}

int {method_name}(double features[N_FEATURES], int node) {{
    if (thresholds[node] != -2) {{
        if (features[indices[node]] <= thresholds[node]) {{
            return {method_name}(features, lefts[node]);
        }} else {{
            return {method_name}(features, rights[node]);
        }}
    }}
    return findMax(classes[node]);
}}

int main(int argc, const char * argv[]) {{

    /* Features: */
    double features[argc-1];
    int i;
    for (i = 1; i < argc; i++) {{
        features[i-1] = atof(argv[i]);
    }}

    /* Prediction: */
    printf("%d", {method_name}(features, 0));
    return 0;

}}
