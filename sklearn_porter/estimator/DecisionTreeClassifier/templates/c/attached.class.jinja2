{% extends 'base.attached.class' %}

{% block content %}
#include <stdlib.h>
#include <stdio.h>
#include <math.h>

#define N_FEATURES {{ n_features }}
#define N_CLASSES {{ n_classes }}

{{ lefts }}
{{ rights }}
{{ thresholds }}
{{ indices }}
{{ classes }}

int findMax(int nums[N_CLASSES]) {
    int idx = 0;
    for (int i = 0; i < N_CLASSES; i++) {
        idx = nums[i] > nums[idx] ? i : idx;
    }
    return idx;
}

int predict(double features[N_FEATURES], int node) {
    if (thresholds[node] != -2) {
        if (features[indices[node]] <= thresholds[node]) {
            return predict(features, lefts[node]);
        } else {
            return predict(features, rights[node]);
        }
    }
    return findMax(classes[node]);
}

int main(int argc, const char * argv[]) {

    /* Features: */
    double features[argc-1];
    for (int i = 1; i < argc; i++) {
        features[i-1] = atof(argv[i]);
    }

    /* Get class prediction: */
    {% if is_test %}
    printf("%d", predict(features, 0));
    {% else %}
    printf("Predicted class: #%d", predict(features, 0));
    {% endif %}
    return 0;
}
{% endblock %}