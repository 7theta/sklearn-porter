{% extends 'base.attached.class' %}

{% block content %}
#include <stdlib.h>
#include <stdio.h>
#include <math.h>

{% if is_test %}
#define N_CLASSES {{ n_classes }}
{% endif %}

int predict(double features[{{ n_features }}]) {
    int i;
    int n_classes = {{ n_classes }};
    int classes[n_classes];

    for (i = 0; i < n_classes; i++) {
        classes[i] = 0;
    }
    {{ tree | indent(4, True) }}

    int idx = 0;
    for (i = 0; i < n_classes; i++) {
        idx = classes[i] > classes[idx] ? i : idx;
    }
    return idx;
}

int main(int argc, const char * argv[]) {

    /* Features: */
    double features[argc-1];
    for (int i = 1; i < argc; i++) {
        features[i-1] = atof(argv[i]);
    }

    /* Get class prediction: */
    {% if not is_test %}
    printf("Predicted class: #%d\n", predict(features));
    {% endif %}

    {% if is_test %}
    // double probabilities[N_CLASSES] = predict_proba(features);
    double probabilities[N_CLASSES] = {1., 2., 3.};
    printf("{\"predict\": %d, \"predict_proba\": [", predict(features));
    for (int i = 0; i < N_CLASSES; i++) {
        printf("%.6f", probabilities[i]);
        if (i < (N_CLASSES - 1)) {
            printf(",");
        }
    }
    printf("]}");
    {% endif %}
    return 0;
}
{% endblock %}