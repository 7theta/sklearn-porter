/**
 * This file is generated by https://github.com/nok/sklearn-porter/
 *
 * Estimator:
 *     DecisionTreeClassifier
 *
 * Documentation:
 *     https://scikit-learn.org/stable/modules/generated/sklearn.tree.DecisionTreeClassifier.html
 *
 * Further usage:
 *     1. Compile the generated source code:
 *         $ javac {class_name}.java
 *     2. Execute a prediction:
 *         $ java {class_name} <feature_1> <feature_n>
 */

class {class_name} {{

    private int[] lefts;
    private int[] rights;
    private double[] thresholds;
    private int[] indices;
    private int[][] classes;

    public {class_name}(int[] lefts, int[] rights, double[] thresholds, int[] indices, int[][] classes) {{
        this.lefts = lefts;
        this.rights = rights;
        this.thresholds = thresholds;
        this.indices = indices;
        this.classes = classes;
    }}

    public int {method_name}(double[] features) {{
        return this.{method_name}(features, 0);
    }}

    public int {method_name}(double[] features, int node) {{
        if (this.thresholds[node] != -2) {{
            if (features[this.indices[node]] <= this.thresholds[node]) {{
                return {method_name}(features, this.lefts[node]);
            }} else {{
                return {method_name}(features, this.rights[node]);
            }}
        }}
        return findMax(this.classes[node]);
    }}

    private int findMax(int[] nums) {{
        int index = 0;
        for (int i = 0; i < nums.length; i++) {{
            index = nums[i] > nums[index] ? i : index;
        }}
        return index;
    }}

    public static void main(String[] args) {{
        if (args.length == {n_features}) {{

            // Features:
            double[] features = new double[args.length];
            for (int i = 0, l = args.length; i < l; i++) {{
                features[i] = Double.parseDouble(args[i]);
            }}

            // Parameters:
            {lefts}
            {rights}
            {thresholds}
            {indices}
            {classes}

            // Prediction:
            {class_name} clf = new {class_name}(lefts, rights, thresholds, indices, classes);
            int estimation = clf.{method_name}(features);
            System.out.println(estimation);

        }}
    }}
}}