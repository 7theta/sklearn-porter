{% extends 'base.exported.class' %}

{% block content %}
var fs = require('fs');

var RandomForestClassifier = function(jsonFile) {
    var that = this;
    that.forest = [];

    var Tree = function(lefts, rights, thresholds, indices, classes) {
        this.lefts = lefts;
        this.rights = rights;
        this.thresholds = thresholds;
        this.indices = indices;
        this.classes = classes;

        var _normVals = function(nums) {
            var i, il = nums.length;
            var result = [], sum = 0.;
            for (i = 0; i < il; i++) {
                sum += nums[i];
            }
            if(sum === 0) {
                for (i = 0; i < il; i++) {
                    result[i] = 1.0 / il;
                }
            } else {
                for (i = 0; i < il; i++) {
                    result[i] = nums[i] / sum;
                }
            }
            return result;
        };

        this._compute = function(features, node) {
            while (this.thresholds[node] !== -2) {
                if (features[this.indices[node]] <= this.thresholds[node]) {
                    node = this.lefts[node];
                } else {
                    node = this.rights[node];
                }
            }
            return _normVals(this.classes[node]);
        };
    };

    var modelData = JSON.parse(fs.readFileSync(jsonFile));
    for (var i = 0, il = modelData.length; i < il; i++) {
        that.forest.push(new Tree(
            modelData[i]['lefts'], modelData[i]['rights'],
            modelData[i]['thresholds'], modelData[i]['indices'],
            modelData[i]['classes']
        ));
    }

    var _findMax = function(nums) {
        var idx = 0;
        for (var i = 0, il = nums.length; i < il; i++) {
            idx = nums[i] > nums[idx] ? i : idx;
        }
        return idx;
    };

    this._compute = function(features) {
        var nTrees = that.forest.length,
            nClasses = that.forest[0].classes[0].length;
        var probas = new Array(nClasses).fill(0);
        var i, j;
        for (i = 0; i < nTrees; i++) {
            var temp = that.forest[i]._compute(features, 0);
            for (j = 0; j < nClasses; j++) {
                probas[j] += temp[j];
            }
        }
        for (j = 0; j < nClasses; j++) {
            probas[j] /= nTrees;
        }
        return probas;
    }

    this.predictProba = function(features) {
        return that._compute(features);
    };

    this.predict = function(features) {
        return _findMax(that.predictProba(features));
    };

};

var main = function () {
    // Features:
    var features = process.argv.slice(3);
    for (var i = 0; i < features.length; i++) {
        features[i] = parseFloat(features[i]);
    }

    // Model data:
    var json = process.argv[2];

    // Estimator:
    var clf = new {{ class_name }}(json);

    {% if is_test or to_json %}
    // Get JSON:
    Promise.all([
        clf.predict(features),
        clf.predictProba(features)
    ]).then(function(vals) {
        console.log(JSON.stringify({
            "predict": vals[0],
            "predict_proba": vals[1]
        }));
    }).catch(function(error) {
        console.log(error);
    });
    {% else %}
    // Get class prediction:
    clf.predict(features).then(function(prediction) {
        console.log("Predicted class: #" + prediction);
    }).catch(function(error) {
        console.log(error);
    });

    // Get class probabilities:
    clf.predictProba(features).then(function(probabilities) {
        for (var i = 0; i < probabilities.length; i++) {
            console.log("Probability of class #" + i + " : " + probabilities[i]);
        }
    }).catch(function(error) {
        console.log(error);
    });
    {% endif %}
}

if (require.main === module) {
    main();
}
{% endblock %}