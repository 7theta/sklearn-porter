{% extends 'base.exported.class' %}

{% block content %}
if (typeof XMLHttpRequest === 'undefined') {
    var XMLHttpRequest = require("xmlhttprequest").XMLHttpRequest;
}

var {{ class_name }} = function(jsonFile) {
    this.data = undefined;

    var Neighbor = function(y, dist) {
        this.y = y;
        this.dist = dist;
    };

    var findMax = function(nums) {
        var i = 0, l = nums.length, idx = 0;
        for (; i < l; i++) {
            idx = nums[i] > nums[idx] ? i : idx;
        }
        return idx;
    };

    var promise = new Promise(function(resolve, reject) {
        var httpRequest = new XMLHttpRequest();
        httpRequest.onreadystatechange = function() {
            if (httpRequest.readyState === 4) {
                if (httpRequest.status === 200) {
                    resolve(JSON.parse(httpRequest.responseText));
                } else {
                    reject(new Error(httpRequest.statusText));
                }
            }
        };
        httpRequest.open('GET', jsonFile, true);
        httpRequest.send();
    });

    var compute = function(temp, cand, q) {  // minkowski distance
        var dist = 0., diff;
        for (var i = 0, l = temp.length; i < l; i++) {
            diff = Math.abs(temp[i] - cand[i]);
            if (q === 1) {
                dist += diff;
            } else if (q === 2) {
                dist += diff*diff;
            } else if (q === Number.POSITIVE_INFINITY) {
                if (diff > dist) {
                    dist = diff;
                }
            } else {
                dist += Math.pow(diff, q);
            }
        }
        if (q === 1 || q === Number.POSITIVE_INFINITY) {
            return dist;
        } else if (q === 2) {
            return Math.sqrt(dist);
        } else {
            return Math.pow(dist, 1. / q);
        }
    };

    this.predict = function(features) {
        var that = this;
        return new Promise(function(resolve, reject) {
            promise.then(function(data) {
                that.predictProba(features).then(function(classProbas) {
                    resolve(findMax(classProbas));
                }).catch(function(error) {
                    reject(error);
                });
            }, function(error) {
                reject(error);
            });
        });
    };

    this.predictProba = function(features) {
        var that = this;
        return new Promise(function(resolve, reject) {
            promise.then(function(data) {
                if (typeof that.data === 'undefined') {
                    that.data = data;
                    that.size = that.data.X.length;
                }
                var classProbas = new Array(that.data.n).fill(0);
                var classIdx = 0, i, dist;

                if (that.data.nNeighbors === 1) {
                    var minDist = Number.POSITIVE_INFINITY;
                    for (i = 0; i < that.data.size; i++) {
                        dist = compute(that.data.X[i], features, that.data.power);
                        if (dist <= minDist) {
                            minDist = dist;
                            classIdx = that.data.y[i];
                        }
                    }
                    classProbas[classIdx] = 1;
                } else {
                    var dists = [];
                    for (i = 0; i < that.size; i++) {
                        dist = compute(that.data.X[i], features, that.data.power);
                        dists.push(new Neighbor(that.data.y[i], dist));
                    }
                    dists.sort(function compare(n1, n2) {
                        return (n1.dist < n2.dist) ? -1 : 1;
                    });
                    for (i = 0; i < that.data.k; i++) {
                        classProbas[dists[i].y] += 1;
                    }
                    for (i = 0; i < that.data.n; i++) {
                        classProbas[i] /= that.data.k;
                    }
                }
                resolve(classProbas);
            }, function(error) {
                reject(error);
            });
        });
    };

};

var main = function () {
    // Features:
    var features = process.argv.slice(3);
    for (var i = 0; i < features.length; i++) {
        features[i] = parseFloat(features[i]);
    }

    // Model data:
    var json = process.argv[2];

    // Estimator:
    var clf = new {{ class_name }}(json);

    {% if is_test or to_json %}
    // Get JSON:
    Promise.all([
        clf.predict(features),
        clf.predictProba(features)
    ]).then(function(vals) {
        console.log(JSON.stringify({
            "predict": vals[0],
            "predict_proba": vals[1]
        }));
    }).catch(function(error) {
        console.log(error);
    });
    {% else %}
    // Get class prediction:
    clf.predict(features).then(function(prediction) {
        console.log("Predicted class: #" + prediction);
    }).catch(function(error) {
        console.log(error);
    });

    // Get class prediction:
    clf.predictProba(features).then(function(probabilities) {
        for (var i = 0; i < probabilities.length; i++) {
            console.log("Probability of class #" + i + " : " + probabilities[i]);
        }
    }).catch(function(error) {
        console.log(error);
    });
    {% endif %}
}

if (require.main === module) {
    main();
}
{% endblock %}