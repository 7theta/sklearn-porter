{% extends 'base.attached.class' %}

{% block content %}
var {{ class_name }} = function(priors, negatives, deltas) {

    this.priors = priors;
    this.negatives = negatives;
    this.deltas = deltas;

    var _findMax = function(nums) {
        var i = 0, l = nums.length, idx = 0;
        for (; i < l; i++) {
            idx = nums[i] > nums[idx] ? i : idx;
        }
        return idx;
    };

    var _compute = function(features, priors, negatives, deltas) {
        var nClasses = priors.length,
            nFeatures = deltas.length,
            jll = new Array(nClasses),
            i, j, sum;
        for (i = 0; i < nClasses; i++) {
            sum = 0.;
            for (j = 0; j < nFeatures; j++) {
                sum += features[i] * deltas[j][i];
            }
            jll[i] = sum;
        }
        for (i = 0; i < nClasses; i++) {
            sum = 0.;
            for (j = 0; j < nFeatures; j++) {
                sum += negatives[i][j];
            }
            jll[i] += priors[i] + sum;
        }
        return jll;
    };

    this.predict = function(features) {
        return _findMax(_compute(features, this.priors, this.negatives, this.deltas));
    };

};

var main = function () {
    if (typeof process !== 'undefined' && typeof process.argv !== 'undefined') {
        if (process.argv.length - 2 !== {{ n_features }}) {
            var IllegalArgumentException = function(message) {
                this.message = message;
                this.name = "IllegalArgumentException";
            }
            throw new IllegalArgumentException("You have to pass {{ n_features }} features.");
        }
    }

    // Features:
    var features = process.argv.slice(2);
    for (var i = 0; i < features.length; i++) {
        features[i] = parseFloat(features[i]);
    }

    // Model data:
    {{ priors }}
    {{ negatives }}
    {{ deltas }}

    // Estimator:
    var clf = new {{ class_name }}(priors, negatives, deltas);

    {% if is_test or to_json %}
    // Get JSON:
    console.log(JSON.stringify({
        "predict": clf.predict(features)
    }));
    {% else %}
    // Get class prediction:
    var prediction = clf.predict(features);
    console.log("Predicted class: #" + prediction);
    {% endif %}
}

if (require.main === module) {
    main();
}
{% endblock %}