{% extends 'base.attached.class' %}

{% block content %}
{% if is_test or to_json %}
import java.util.Arrays;

{% endif %}
class {{ class_name }} {

    private double[] priors;
    private double[][] negatives;
    private double[][] deltas;

    public {{ class_name }}(double[] priors, double[][] negatives, double[][] deltas) {
        this.priors = priors;
        this.negatives = negatives;
        this.deltas = deltas;
    }

    public int predict(double[] features) {
        int nClasses = this.priors.length;
        int nFeatures = this.deltas.length;

        double[] jll = new double[nClasses];
        for (int i = 0; i < nClasses; i++) {
            double sum = 0.;
            for (int j = 0; j < nFeatures; j++) {
                sum += features[i] * this.deltas[j][i];
            }
            jll[i] = sum;
        }
        for (int i = 0; i < nClasses; i++) {
            double sum = 0.;
            for (int j = 0; j < nFeatures; j++) {
                sum += this.negatives[i][j];
            }
            jll[i] += this.priors[i] + sum;
        }

        int classIndex = 0;
        for (int i = 0; i < nClasses; i++) {
            classIndex = jll[i] > jll[classIndex] ? i : classIndex;
        }
        return classIndex;
    }

    public static void main(String[] args) {

        int nFeatures = {{ n_features }};
        if (args.length != nFeatures) {
            throw new IllegalArgumentException("You have to pass " +  String.valueOf(nFeatures) + " features.");
        }

        // Features:
        double[] features = new double[args.length];
        for (int i = 0, l = args.length; i < l; i++) {
            features[i] = Double.parseDouble(args[i]);
        }

        // Model data:
        {{ priors }}
        {{ negatives }}
        {{ deltas }}

        // Estimator:
        {{ class_name }} clf = new {{ class_name }}(priors, negatives, deltas);

        {% if is_test or to_json %}
        // Get JSON:
        int prediction = clf.predict(features);
        System.out.println("{\"predict\": " + String.valueOf(prediction) + "}");
        {% else %}
        // Get class prediction:
        int prediction = clf.predict(features);
        System.out.println("Predicted class: #" + String.valueOf(prediction));
        {% endif %}

    }
}
{% endblock %}